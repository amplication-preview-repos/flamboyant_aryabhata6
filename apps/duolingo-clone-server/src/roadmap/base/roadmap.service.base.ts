/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, Roadmap as PrismaRoadmap } from "@prisma/client";

export class RoadmapServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.RoadmapCountArgs, "select">): Promise<number> {
    return this.prisma.roadmap.count(args);
  }

  async roadmaps<T extends Prisma.RoadmapFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.RoadmapFindManyArgs>
  ): Promise<PrismaRoadmap[]> {
    return this.prisma.roadmap.findMany<Prisma.RoadmapFindManyArgs>(args);
  }
  async roadmap<T extends Prisma.RoadmapFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.RoadmapFindUniqueArgs>
  ): Promise<PrismaRoadmap | null> {
    return this.prisma.roadmap.findUnique(args);
  }
  async createRoadmap<T extends Prisma.RoadmapCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.RoadmapCreateArgs>
  ): Promise<PrismaRoadmap> {
    return this.prisma.roadmap.create<T>(args);
  }
  async updateRoadmap<T extends Prisma.RoadmapUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.RoadmapUpdateArgs>
  ): Promise<PrismaRoadmap> {
    return this.prisma.roadmap.update<T>(args);
  }
  async deleteRoadmap<T extends Prisma.RoadmapDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.RoadmapDeleteArgs>
  ): Promise<PrismaRoadmap> {
    return this.prisma.roadmap.delete(args);
  }
}
