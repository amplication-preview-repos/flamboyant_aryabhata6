/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, UserCoins as PrismaUserCoins } from "@prisma/client";

export class UserCoinsServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.UserCoinsCountArgs, "select">
  ): Promise<number> {
    return this.prisma.userCoins.count(args);
  }

  async userCoinsItems<T extends Prisma.UserCoinsFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.UserCoinsFindManyArgs>
  ): Promise<PrismaUserCoins[]> {
    return this.prisma.userCoins.findMany<Prisma.UserCoinsFindManyArgs>(args);
  }
  async userCoins<T extends Prisma.UserCoinsFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.UserCoinsFindUniqueArgs>
  ): Promise<PrismaUserCoins | null> {
    return this.prisma.userCoins.findUnique(args);
  }
  async createUserCoins<T extends Prisma.UserCoinsCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.UserCoinsCreateArgs>
  ): Promise<PrismaUserCoins> {
    return this.prisma.userCoins.create<T>(args);
  }
  async updateUserCoins<T extends Prisma.UserCoinsUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.UserCoinsUpdateArgs>
  ): Promise<PrismaUserCoins> {
    return this.prisma.userCoins.update<T>(args);
  }
  async deleteUserCoins<T extends Prisma.UserCoinsDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.UserCoinsDeleteArgs>
  ): Promise<PrismaUserCoins> {
    return this.prisma.userCoins.delete(args);
  }
}
