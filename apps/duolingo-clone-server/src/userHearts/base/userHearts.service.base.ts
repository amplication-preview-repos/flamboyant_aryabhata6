/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, UserHearts as PrismaUserHearts } from "@prisma/client";

export class UserHeartsServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.UserHeartsCountArgs, "select">
  ): Promise<number> {
    return this.prisma.userHearts.count(args);
  }

  async userHeartsItems<T extends Prisma.UserHeartsFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.UserHeartsFindManyArgs>
  ): Promise<PrismaUserHearts[]> {
    return this.prisma.userHearts.findMany<Prisma.UserHeartsFindManyArgs>(args);
  }
  async userHearts<T extends Prisma.UserHeartsFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.UserHeartsFindUniqueArgs>
  ): Promise<PrismaUserHearts | null> {
    return this.prisma.userHearts.findUnique(args);
  }
  async createUserHearts<T extends Prisma.UserHeartsCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.UserHeartsCreateArgs>
  ): Promise<PrismaUserHearts> {
    return this.prisma.userHearts.create<T>(args);
  }
  async updateUserHearts<T extends Prisma.UserHeartsUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.UserHeartsUpdateArgs>
  ): Promise<PrismaUserHearts> {
    return this.prisma.userHearts.update<T>(args);
  }
  async deleteUserHearts<T extends Prisma.UserHeartsDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.UserHeartsDeleteArgs>
  ): Promise<PrismaUserHearts> {
    return this.prisma.userHearts.delete(args);
  }
}
